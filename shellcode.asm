; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33218.0 

; include listing.inc

; INCLUDELIB LIBCMT
; INCLUDELIB OLDNAMES

PUBLIC	MyGetNTDLLProcAddress
PUBLIC	strcmpAAi
PUBLIC	main
PUBLIC  AlignRSP

_TEXT SEGMENT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; AlignRSP is a simple call stub that ensures that the stack is 16-byte aligned prior
; to calling the entry point of the payload. This is necessary because 64-bit functions
; in Windows assume that they were called with 16-byte stack alignment. When amd64
; shellcode is executed, you can't be assured that you stack is 16-byte aligned. For example,
; if your shellcode lands with 8-byte stack alignment, any call to a Win32 function will likely
; crash upon calling any ASM instruction that utilizes XMM registers (which require 16-byte)
; alignment.

AlignRSP PROC
 push rsi    ; Preserve RSI since we're stomping on it
 mov  rsi, rsp  ; Save the value of RSP so it can be restored
 and  rsp, 0FFFFFFFFFFFFFFF0h ; Align RSP to 16 bytes
 sub  rsp, 020h  ; Allocate homing space for ExecutePayload
 call main ; Call the entry point of the payload
 mov  rsp, rsi  ; Restore the original value of RSP
 pop  rsi    ; Restore RSI
 ret      ; Return to caller
AlignRSP ENDP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
_TEXT ENDS



; Function compile flags: /Odtp
_TEXT	SEGMENT
cNtCreateUserProcess$ = 96
cRtlCreateProcessParametersEx$ = 120
pathBuffer$ = 160
NtImagePath$ = 240
ProcessParameters$ = 256
status$ = 264
myRtlCreateProcessParametersEx$ = 272
tHandle$ = 280
pHandle$ = 288
myNtCreateUserProcess$ = 296
attributeList$ = 304
createInfo$ = 384
main	PROC
; File shellcode.c
; Line 71
$LN3:
	push	rdi
	sub	rsp, 480				; 000001e0H
; Line 100
	mov	BYTE PTR cNtCreateUserProcess$[rsp], 78	; 0000004eH
	mov	BYTE PTR cNtCreateUserProcess$[rsp+1], 116 ; 00000074H
	mov	BYTE PTR cNtCreateUserProcess$[rsp+2], 67 ; 00000043H
	mov	BYTE PTR cNtCreateUserProcess$[rsp+3], 114 ; 00000072H
	mov	BYTE PTR cNtCreateUserProcess$[rsp+4], 101 ; 00000065H
	mov	BYTE PTR cNtCreateUserProcess$[rsp+5], 97 ; 00000061H
	mov	BYTE PTR cNtCreateUserProcess$[rsp+6], 116 ; 00000074H
	mov	BYTE PTR cNtCreateUserProcess$[rsp+7], 101 ; 00000065H
	mov	BYTE PTR cNtCreateUserProcess$[rsp+8], 85 ; 00000055H
	mov	BYTE PTR cNtCreateUserProcess$[rsp+9], 115 ; 00000073H
	mov	BYTE PTR cNtCreateUserProcess$[rsp+10], 101 ; 00000065H
	mov	BYTE PTR cNtCreateUserProcess$[rsp+11], 114 ; 00000072H
	mov	BYTE PTR cNtCreateUserProcess$[rsp+12], 80 ; 00000050H
	mov	BYTE PTR cNtCreateUserProcess$[rsp+13], 114 ; 00000072H
	mov	BYTE PTR cNtCreateUserProcess$[rsp+14], 111 ; 0000006fH
	mov	BYTE PTR cNtCreateUserProcess$[rsp+15], 99 ; 00000063H
	mov	BYTE PTR cNtCreateUserProcess$[rsp+16], 101 ; 00000065H
	mov	BYTE PTR cNtCreateUserProcess$[rsp+17], 115 ; 00000073H
	mov	BYTE PTR cNtCreateUserProcess$[rsp+18], 115 ; 00000073H
	mov	BYTE PTR cNtCreateUserProcess$[rsp+19], 0
; Line 101
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp], 82 ; 00000052H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+1], 116 ; 00000074H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+2], 108 ; 0000006cH
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+3], 67 ; 00000043H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+4], 114 ; 00000072H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+5], 101 ; 00000065H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+6], 97 ; 00000061H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+7], 116 ; 00000074H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+8], 101 ; 00000065H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+9], 80 ; 00000050H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+10], 114 ; 00000072H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+11], 111 ; 0000006fH
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+12], 99 ; 00000063H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+13], 101 ; 00000065H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+14], 115 ; 00000073H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+15], 115 ; 00000073H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+16], 80 ; 00000050H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+17], 97 ; 00000061H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+18], 114 ; 00000072H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+19], 97 ; 00000061H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+20], 109 ; 0000006dH
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+21], 101 ; 00000065H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+22], 116 ; 00000074H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+23], 101 ; 00000065H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+24], 114 ; 00000072H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+25], 115 ; 00000073H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+26], 69 ; 00000045H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+27], 120 ; 00000078H
	mov	BYTE PTR cRtlCreateProcessParametersEx$[rsp+28], 0
; Line 102
	mov	eax, 92					; 0000005cH
	mov	WORD PTR pathBuffer$[rsp], ax
	mov	eax, 63					; 0000003fH
	mov	WORD PTR pathBuffer$[rsp+2], ax
	mov	eax, 63					; 0000003fH
	mov	WORD PTR pathBuffer$[rsp+4], ax
	mov	eax, 92					; 0000005cH
	mov	WORD PTR pathBuffer$[rsp+6], ax
	mov	eax, 67					; 00000043H
	mov	WORD PTR pathBuffer$[rsp+8], ax
	mov	eax, 58					; 0000003aH
	mov	WORD PTR pathBuffer$[rsp+10], ax
	mov	eax, 92					; 0000005cH
	mov	WORD PTR pathBuffer$[rsp+12], ax
	mov	eax, 87					; 00000057H
	mov	WORD PTR pathBuffer$[rsp+14], ax
	mov	eax, 105				; 00000069H
	mov	WORD PTR pathBuffer$[rsp+16], ax
	mov	eax, 110				; 0000006eH
	mov	WORD PTR pathBuffer$[rsp+18], ax
	mov	eax, 100				; 00000064H
	mov	WORD PTR pathBuffer$[rsp+20], ax
	mov	eax, 111				; 0000006fH
	mov	WORD PTR pathBuffer$[rsp+22], ax
	mov	eax, 119				; 00000077H
	mov	WORD PTR pathBuffer$[rsp+24], ax
	mov	eax, 115				; 00000073H
	mov	WORD PTR pathBuffer$[rsp+26], ax
	mov	eax, 92					; 0000005cH
	mov	WORD PTR pathBuffer$[rsp+28], ax
	mov	eax, 83					; 00000053H
	mov	WORD PTR pathBuffer$[rsp+30], ax
	mov	eax, 121				; 00000079H
	mov	WORD PTR pathBuffer$[rsp+32], ax
	mov	eax, 115				; 00000073H
	mov	WORD PTR pathBuffer$[rsp+34], ax
	mov	eax, 116				; 00000074H
	mov	WORD PTR pathBuffer$[rsp+36], ax
	mov	eax, 101				; 00000065H
	mov	WORD PTR pathBuffer$[rsp+38], ax
	mov	eax, 109				; 0000006dH
	mov	WORD PTR pathBuffer$[rsp+40], ax
	mov	eax, 51					; 00000033H
	mov	WORD PTR pathBuffer$[rsp+42], ax
	mov	eax, 50					; 00000032H
	mov	WORD PTR pathBuffer$[rsp+44], ax
	mov	eax, 92					; 0000005cH
	mov	WORD PTR pathBuffer$[rsp+46], ax
	mov	eax, 99					; 00000063H
	mov	WORD PTR pathBuffer$[rsp+48], ax
	mov	eax, 97					; 00000061H
	mov	WORD PTR pathBuffer$[rsp+50], ax
	mov	eax, 108				; 0000006cH
	mov	WORD PTR pathBuffer$[rsp+52], ax
	mov	eax, 99					; 00000063H
	mov	WORD PTR pathBuffer$[rsp+54], ax
	mov	eax, 46					; 0000002eH
	mov	WORD PTR pathBuffer$[rsp+56], ax
	mov	eax, 101				; 00000065H
	mov	WORD PTR pathBuffer$[rsp+58], ax
	mov	eax, 120				; 00000078H
	mov	WORD PTR pathBuffer$[rsp+60], ax
	mov	eax, 101				; 00000065H
	mov	WORD PTR pathBuffer$[rsp+62], ax
	xor	eax, eax
	mov	WORD PTR pathBuffer$[rsp+64], ax
; Line 105
	lea	rcx, QWORD PTR cNtCreateUserProcess$[rsp]
	call	MyGetNTDLLProcAddress
	mov	QWORD PTR myNtCreateUserProcess$[rsp], rax
; Line 106
	lea	rcx, QWORD PTR cRtlCreateProcessParametersEx$[rsp]
	call	MyGetNTDLLProcAddress
	mov	QWORD PTR myRtlCreateProcessParametersEx$[rsp], rax
; Line 108
	mov	QWORD PTR pHandle$[rsp], 0
	mov	QWORD PTR tHandle$[rsp], 0
; Line 111
	lea	rax, QWORD PTR NtImagePath$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb
; Line 112
	mov	eax, 64					; 00000040H
	mov	WORD PTR NtImagePath$[rsp], ax
; Line 113
	movzx	eax, WORD PTR NtImagePath$[rsp]
	add	rax, 2
	mov	WORD PTR NtImagePath$[rsp+2], ax
; Line 114
	lea	rax, QWORD PTR pathBuffer$[rsp]
	mov	QWORD PTR NtImagePath$[rsp+8], rax
; Line 119
	mov	QWORD PTR ProcessParameters$[rsp], 0
; Line 120
	mov	DWORD PTR [rsp+80], 1
	mov	QWORD PTR [rsp+72], 0
	mov	QWORD PTR [rsp+64], 0
	mov	QWORD PTR [rsp+56], 0
	mov	QWORD PTR [rsp+48], 0
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rdx, QWORD PTR NtImagePath$[rsp]
	lea	rcx, QWORD PTR ProcessParameters$[rsp]
	call	QWORD PTR myRtlCreateProcessParametersEx$[rsp]
; Line 122
	lea	rax, QWORD PTR createInfo$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 123
	mov	QWORD PTR createInfo$[rsp], 88		; 00000058H
; Line 124
	mov	DWORD PTR createInfo$[rsp+8], 0
; Line 126
	lea	rax, QWORD PTR attributeList$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 72					; 00000048H
	rep stosb
; Line 127
	mov	QWORD PTR attributeList$[rsp], 40	; 00000028H
; Line 128
	mov	eax, 32					; 00000020H
	imul	rax, rax, 0
	mov	QWORD PTR attributeList$[rsp+rax+8], 131077 ; 00020005H
; Line 129
	mov	eax, 32					; 00000020H
	imul	rax, rax, 0
	movzx	ecx, WORD PTR NtImagePath$[rsp]
	mov	QWORD PTR attributeList$[rsp+rax+16], rcx
; Line 130
	mov	eax, 32					; 00000020H
	imul	rax, rax, 0
	mov	rcx, QWORD PTR NtImagePath$[rsp+8]
	mov	QWORD PTR attributeList$[rsp+rax+24], rcx
; Line 134
	lea	rax, QWORD PTR attributeList$[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, QWORD PTR createInfo$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR ProcessParameters$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 2097151				; 001fffffH
	mov	r8d, 2097151				; 001fffffH
	lea	rdx, QWORD PTR tHandle$[rsp]
	lea	rcx, QWORD PTR pHandle$[rsp]
	call	QWORD PTR myNtCreateUserProcess$[rsp]
	mov	DWORD PTR status$[rsp], eax
; Line 147
	xor	eax, eax
	add	rsp, 480				; 000001e0H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c1$1 = 0
c2$2 = 1
tv75 = 4
tv84 = 8
tv94 = 12
str1$ = 32
str2$ = 40
strcmpAAi PROC
; File shellcode.c
; Line 19
$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
$LN2@strcmpAAi:
; Line 20
	mov	rax, QWORD PTR str1$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN3@strcmpAAi
	mov	rax, QWORD PTR str2$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN3@strcmpAAi
; Line 21
	mov	rax, QWORD PTR str1$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN6@strcmpAAi
	mov	rax, QWORD PTR str1$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 90					; 0000005aH
	jg	SHORT $LN6@strcmpAAi
	mov	rax, QWORD PTR str1$[rsp]
	movsx	eax, BYTE PTR [rax]
	add	eax, 32					; 00000020H
	mov	DWORD PTR tv75[rsp], eax
	jmp	SHORT $LN7@strcmpAAi
$LN6@strcmpAAi:
	mov	rax, QWORD PTR str1$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv75[rsp], eax
$LN7@strcmpAAi:
	movzx	eax, BYTE PTR tv75[rsp]
	mov	BYTE PTR c1$1[rsp], al
; Line 22
	mov	rax, QWORD PTR str2$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN8@strcmpAAi
	mov	rax, QWORD PTR str2$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 90					; 0000005aH
	jg	SHORT $LN8@strcmpAAi
	mov	rax, QWORD PTR str2$[rsp]
	movsx	eax, BYTE PTR [rax]
	add	eax, 32					; 00000020H
	mov	DWORD PTR tv84[rsp], eax
	jmp	SHORT $LN9@strcmpAAi
$LN8@strcmpAAi:
	mov	rax, QWORD PTR str2$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv84[rsp], eax
$LN9@strcmpAAi:
	movzx	eax, BYTE PTR tv84[rsp]
	mov	BYTE PTR c2$2[rsp], al
; Line 24
	movsx	eax, BYTE PTR c1$1[rsp]
	movsx	ecx, BYTE PTR c2$2[rsp]
	cmp	eax, ecx
	je	SHORT $LN4@strcmpAAi
	xor	al, al
	jmp	SHORT $LN1@strcmpAAi
$LN4@strcmpAAi:
; Line 26
	mov	rax, QWORD PTR str1$[rsp]
	inc	rax
	mov	QWORD PTR str1$[rsp], rax
; Line 27
	mov	rax, QWORD PTR str2$[rsp]
	inc	rax
	mov	QWORD PTR str2$[rsp], rax
; Line 28
	jmp	$LN2@strcmpAAi
$LN3@strcmpAAi:
; Line 29
	mov	rax, QWORD PTR str1$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR str2$[rsp]
	movsx	ecx, BYTE PTR [rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@strcmpAAi
	mov	DWORD PTR tv94[rsp], 1
	jmp	SHORT $LN11@strcmpAAi
$LN10@strcmpAAi:
	mov	DWORD PTR tv94[rsp], 0
$LN11@strcmpAAi:
	movzx	eax, BYTE PTR tv94[rsp]
$LN1@strcmpAAi:
; Line 30
	add	rsp, 24
	ret	0
strcmpAAi ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ordinal$ = 32
i$1 = 36
baseAddr$ = 40
exportDirectory$ = 48
funcRVA$ = 56
curr$ = 64
peb$ = 72
head$ = 80
exportData$ = 88
exportedNamesRVA$2 = 96
name$3 = 104
nameIndexToOrdinal$4 = 112
exportedFunctions$ = 120
lpProcName$ = 144
MyGetNTDLLProcAddress PROC
; File shellcode.c
; Line 34
$LN11:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 35
	mov	rax, QWORD PTR gs:[96]
	mov	QWORD PTR peb$[rsp], rax
; Line 36
	mov	rax, QWORD PTR peb$[rsp]
	mov	rax, QWORD PTR [rax+24]
	add	rax, 16
	mov	QWORD PTR head$[rsp], rax
; Line 38
	mov	rax, QWORD PTR head$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR curr$[rsp], rax
; Line 39
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR curr$[rsp], rax
; Line 41
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR baseAddr$[rsp], rax
; Line 42
	cmp	QWORD PTR baseAddr$[rsp], 0
	jne	SHORT $LN5@MyGetNTDLL
	xor	eax, eax
	jmp	$LN1@MyGetNTDLL
$LN5@MyGetNTDLL:
; Line 45
	mov	rax, QWORD PTR baseAddr$[rsp]
	movsxd	rax, DWORD PTR [rax+60]
	mov	rcx, QWORD PTR baseAddr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	lea	rax, QWORD PTR [rax+rcx+136]
	mov	QWORD PTR exportData$[rsp], rax
; Line 46
	mov	rax, QWORD PTR exportData$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR baseAddr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR exportDirectory$[rsp], rax
; Line 47
	xor	eax, eax
	mov	WORD PTR ordinal$[rsp], ax
; Line 48
	mov	rax, QWORD PTR exportDirectory$[rsp]
	mov	eax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR baseAddr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR exportedFunctions$[rsp], rax
; Line 49
	mov	rax, QWORD PTR lpProcName$[rsp]
	shr	rax, 16
	test	rax, rax
	jne	SHORT $LN6@MyGetNTDLL
; Line 51
	mov	rax, QWORD PTR lpProcName$[rsp]
	and	rax, 65535				; 0000ffffH
	mov	WORD PTR ordinal$[rsp], ax
; Line 52
	jmp	$LN7@MyGetNTDLL
$LN6@MyGetNTDLL:
; Line 54
	mov	rax, QWORD PTR exportDirectory$[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	rcx, QWORD PTR baseAddr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR exportedNamesRVA$2[rsp], rax
; Line 55
	mov	rax, QWORD PTR exportDirectory$[rsp]
	mov	eax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR baseAddr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR nameIndexToOrdinal$4[rsp], rax
; Line 56
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@MyGetNTDLL
$LN2@MyGetNTDLL:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@MyGetNTDLL:
	mov	rax, QWORD PTR exportDirectory$[rsp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN3@MyGetNTDLL
; Line 58
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR exportedNamesRVA$2[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	rcx, QWORD PTR baseAddr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR name$3[rsp], rax
; Line 59
	mov	rdx, QWORD PTR lpProcName$[rsp]
	mov	rcx, QWORD PTR name$3[rsp]
	call	strcmpAAi
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@MyGetNTDLL
; Line 60
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR nameIndexToOrdinal$4[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	rcx, QWORD PTR exportDirectory$[rsp]
	add	eax, DWORD PTR [rcx+16]
	mov	WORD PTR ordinal$[rsp], ax
; Line 61
	jmp	SHORT $LN3@MyGetNTDLL
$LN8@MyGetNTDLL:
; Line 63
	jmp	SHORT $LN2@MyGetNTDLL
$LN3@MyGetNTDLL:
$LN7@MyGetNTDLL:
; Line 66
	movzx	eax, WORD PTR ordinal$[rsp]
	test	eax, eax
	jne	SHORT $LN9@MyGetNTDLL
	xor	eax, eax
	jmp	SHORT $LN1@MyGetNTDLL
$LN9@MyGetNTDLL:
; Line 67
	movzx	eax, WORD PTR ordinal$[rsp]
	mov	rcx, QWORD PTR exportDirectory$[rsp]
	sub	eax, DWORD PTR [rcx+16]
	mov	eax, eax
	mov	rcx, QWORD PTR exportedFunctions$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR funcRVA$[rsp], eax
; Line 68
	mov	eax, DWORD PTR funcRVA$[rsp]
	mov	rcx, QWORD PTR baseAddr$[rsp]
	add	rcx, rax
	mov	rax, rcx
$LN1@MyGetNTDLL:
; Line 69
	add	rsp, 136				; 00000088H
	ret	0
MyGetNTDLLProcAddress ENDP
_TEXT	ENDS
END
